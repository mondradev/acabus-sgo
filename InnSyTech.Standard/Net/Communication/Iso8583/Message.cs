///////////////////////////////////////////////////////////
//  MessageIso8583.cs
//  Implementation of the Class MessageIso8583
//  Generated by Enterprise Architect
//  Created on:      12-dic.-2017 06:17:17 p. m.
//  Original author: Javier de J. Flores Mondragón
///////////////////////////////////////////////////////////

using System;
using System.Collections;
using System.Collections.Generic;
using System.Xml;

namespace InnSyTech.Standard.Net.Communication.Iso8583
{
    public class Message : IDisposable, IEnumerable
    {
        /// <summary>
        /// Indica si el mensaje a sido desechado
        /// </summary>
        private bool _disposed;

        private Dictionary<int, Field> _fields;
        private int[] _mti = new int[4];
        private XmlDocument _template;

        ///
        /// <param name="template"></param>
        public Message(XmlDocument template)
        {
        }

        ~Message()
        {
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="index"></param>
        public object this[int index] => _fields[index];

        ///
        /// <param name="message"></param>
        public static Message Parse(string message)
        {
            return null;
        }

        /// <summary>
        /// Agrega un nuevo campo al mensaje, en caso de existir este enviará una excepción
        /// ArgumentException.
        /// </summary>
        /// <param name="index">Indice del campo a agregar</param>
        /// <param name="data">Valor del campo que se agregará</param>
        public void Add(int index, object data)
        {
        }

        /// <summary>
        /// Agrega un campo que permita el manejo de campos numericos
        /// </summary>
        /// <param name="index"></param>
        /// <param name="data"></param>
        public void Add(int index, int data)
        {
        }

        ///
        /// <param name="index"></param>
        /// <param name="data"></param>
        public void Add(int index, string data)
        {
        }

        ///
        /// <param name="index"></param>
        /// <param name="data"></param>
        public void Add(int index, float data)
        {
        }

        ///
        /// <param name="index"></param>
        /// <param name="data"></param>
        public void Add(int index, bool data)
        {
        }

        ///
        /// <param name="index"></param>
        /// <param name="data"></param>
        public void Add(int index, double data)
        {
        }

        ///
        /// <param name="index"></param>
        /// <param name="data"></param>
        public void Add(int index, DateTime data)
        {
        }

        ///
        /// <param name="index"></param>
        /// <param name="data"></param>
        public void Add(int index, byte[] data)
        {
        }

        ///
        /// <param name="index"></param>
        /// <param name="data"></param>
        public void Add(int index, short data)
        {
        }

        ///
        /// <param name="index"></param>
        /// <param name="data"></param>
        public void Add(int index, long data)
        {
        }

        ///
        /// <param name="index"></param>
        /// <param name="data"></param>
        public void Add(int index, char data)
        {
        }

        ///
        /// <param name="index"></param>
        /// <param name="data"></param>
        public void Add(int index, TimeSpan data)
        {
        }

        public void Dispose()
        {
            throw new NotImplementedException();
        }

        ///
        /// <param name="data"></param>
        public Message FromBytes(byte[] data)
        {
            return null;
        }

        ///
        /// <param name="index"></param>
        public bool GetBool(int index)
        {
            return false;
        }

        ///
        /// <param name="index"></param>
        public byte[] GetBytes(int index)
        {
            return null;
        }

        ///
        /// <param name="index"></param>
        public char GetChar(int index)
        {
            return default(char);
        }

        ///
        /// <param name="index"></param>
        public DateTime GetDateTime(int index)
        {
            return default(DateTime);
        }

        ///
        /// <param name="index"></param>
        public double GetDouble(int index)
        {
            return 0;
        }

        public IEnumerator GetEnumerator()
        {
            return null;
        }

        ///
        /// <param name="index"></param>
        public float GetFloat(int index)
        {
            return 0;
        }

        ///
        /// <param name="index"></param>
        public short GetInt16(int index)
        {
            return 0;
        }

        ///
        /// <param name="index"></param>
        public int GetInt32(int index)
        {
            return 0;
        }

        ///
        /// <param name="index"></param>
        public long GetInt64(int index)
        {
            return 0;
        }

        ///
        /// <param name="index"></param>
        public object GetObject(int index)
        {
            return null;
        }

        ///
        /// <param name="index"></param>
        public string GetString(int index)
        {
            return "";
        }

        ///
        /// <param name="index"></param>
        public TimeSpan GetTimeSpan(int index)
        {
            return default(TimeSpan);
        }

        ///
        /// <param name="index"></param>
        public bool Remove(int index)
        {
            return false;
        }

        public byte[] ToBytes()
        {
            return null;
        }

        public override string ToString()
        {
            return "";
        }

        ///
        /// <param name="bitmap"></param>
        /// <param name="data"></param>
        /// <param name="template"></param>
        private static Message Decode(byte[] bitmap, byte[] data, XmlDocument template)
        {
            return null;
        }

        ///
        /// <param name="message"></param>
        private static byte[] Encode(Message message)
        {
            return null;
        }

        ///
        /// <param name="index"></param>
        private Field GetField(int index)
        {
            return null;
        }

        ///
        /// <param name="index"></param>
        private int GetFieldSize(int index)
        {
            return 0;
        }

        ///
        /// <param name="index"></param>
        private FieldType GetFieldType(int index)
        {
            return default(FieldType);
        }
    }
}