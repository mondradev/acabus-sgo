///////////////////////////////////////////////////////////
// FieldIso8583.cs Implementation of the Class FieldIso8583 Generated by Enterprise Architect Created
// on: 12-dic.-2017 06:17:16 p. m. Original author: Javier de J. Flores Mondragón
///////////////////////////////////////////////////////////

using System;
using System.Linq;
using System.Text;

namespace InnSyTech.Standard.Net.Communication.Iso8583
{
    /// <summary>
    /// Representa un campo utilizado para los mensajes de transacciones financieras del ISO 8583.
    /// </summary>
    public sealed class Field
    {
        /// <summary>
        /// Campo que provee a la propiedad <see cref="ID" />.
        /// </summary>
        private int _id;

        /// <summary>
        /// Campo que provee a la propiedad <see cref="Value" />.
        /// </summary>
        private object _value;

        /// <summary>
        /// Crea un nuevo campo especificando su identificador y el valor.
        /// </summary>
        /// <param name="id"> Identificador del campo. </param>
        /// <param name="value"> Valor del campo. </param>
        public Field(int id, object value)
        {
            _id = id;
            _value = value;
        }

        /// <summary>
        /// Destruye el campo estableciendo su identificar en 0 y su valor en nulo.
        /// </summary>
        ~Field()
        {
            _id = 0;
            _value = null;
        }

        /// <summary>
        /// Obtiene el identificador del campo.
        /// </summary>
        public int ID
            => _id;

        /// <summary>
        /// Obtiene el valor del campo.
        /// </summary>
        public object Value
            => _value;

        /// <summary>
        /// Decodifica el campo a partir de un vector de bytes especficando el tipo del campo y su longitud.
        /// </summary>
        /// <param name="id">Identificador del campo.</param>
        /// <param name="data"> Vector de bytes que representan al campo. </param>
        /// <param name="size"> Longitud máxima o fija del campo según el tipo. </param>
        /// <param name="type"> Tipo del campo a decodificar. </param>
        /// <param name="length"> Tipo de longitud del campo. </param>
        /// <param name="format"> Formato de contenido del campo. </param>
        /// <param name="padding"> Valor utilizado para rellenar el espacio del campo. </param>
        /// <returns> El campo decodificado. </returns>
        public static Field Decode(int id, ref byte[] data, int size, FieldType type, FieldLength length = FieldLength.Fixed, FieldFormat format = FieldFormat.Hexadecimal, byte padding = 0)
        {
            int minSize = size;
            int maxSize = size;

            switch (length)
            {
                case FieldLength.Fixed:
                    minSize = size;
                    break;

                case FieldLength.Lvar:
                    minSize = 2;
                    break;

                case FieldLength.Llvar:
                    minSize = (format & FieldFormat.BinaryCodedDecimal) == FieldFormat.BinaryCodedDecimal ? 2 : 3;
                    break;

                case FieldLength.Lllvar:
                    minSize = (format & FieldFormat.BinaryCodedDecimal) == FieldFormat.BinaryCodedDecimal ? 3 : 4;
                    break;

                default:
                    throw new ArgumentOutOfRangeException(nameof(length), "El tipo de longitud del campo no es valida para los mensajes ISO8583.");
            }

            switch (format)
            {
                case FieldFormat.Hexadecimal:
                    break;

                case FieldFormat.BinaryCodedDecimal:
                    if (type != FieldType.Numeric)
                        throw new ArgumentOutOfRangeException(nameof(format), "El formato no es compatible con el tipo especificado para los mensajes ISO8583.");
                    break;

                default:
                    throw new ArgumentOutOfRangeException(nameof(format), "El formato del campo no es valido para los mensajes ISO8583.");
            }

            switch (type)
            {
                case FieldType.Numeric:
                    break;

                case FieldType.Alphanumeric:
                    break;

                case FieldType.Special:
                    break;

                case FieldType.Binary:

                    /** Conversión a un campo de binario **/

                    if ((format & FieldFormat.Hexadecimal) != FieldFormat.Hexadecimal)
                        throw new ArgumentOutOfRangeException(nameof(format), "Los campos binarios unicamente se almacenan en formato hexadecimal.");

                    if (length == FieldLength.Fixed)
                    {
                        data = data.Skip(size).ToArray();

                        return new Field(id, data.Take(size));
                    }
                    else
                    {
                        byte[] vli = data.Take(minSize - 1).ToArray();
                        int realSize = GetSize(vli, format);
                        byte[] content = data.Skip(minSize - 1).Take(realSize).ToArray();

                        data = data.Skip(minSize - 1 + realSize).ToArray();

                        return new Field(id, content);
                    }

                case FieldType.Alphanumeric | FieldType.Numeric:
                    break;

                case FieldType.Alphanumeric | FieldType.Numeric | FieldType.Special:
                    break;

                case FieldType.Alphanumeric | FieldType.Special:
                    break;

                case FieldType.Numeric | FieldType.Special:
                    break;

                default:
                    throw new ArgumentOutOfRangeException(nameof(type), "El tipo de campo no es valido para los mensajes ISO8583.");
            }
            return null;
        }

        /// <summary>
        /// Obtiene el tamaño del campo a partir del formato que se esta .
        /// </summary>
        /// <param name="vli">Indicador de la longitud variable.</param>
        /// <param name="format">Formato del indicador.</param>
        /// <returns>Tamaño del campo.</returns>
        private static int GetSize(byte[] vli, FieldFormat format)
        {
            if ((format & FieldFormat.BinaryCodedDecimal) == FieldFormat.BinaryCodedDecimal)
                return Int32.Parse(BitConverter.ToString(vli).Replace("-", ""));
            return Int32.Parse(Encoding.ASCII.GetString(vli));
        }

        /// <summary>
        /// Obtiene los bytes que representan al campo actual especificando el tipo y la longitud
        /// máxima o fija.
        /// </summary>
        /// <param name="size"> Longitud máxima o fija del campo. </param>
        /// <param name="type"> Tipo del campo a codificar. </param>
        /// <returns> Un vector de bytes que representan al campo. </returns>
        public byte[] Encode(int size, FieldType type)
        {
            return null;
        }
    }
}